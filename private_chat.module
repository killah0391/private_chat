<?php

/**
 * @file
 * Contains private_chat.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\private_chat\Entity\Chat;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\FileInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function private_chat_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the private_chat module.
    case 'help.page.private_chat':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a private chat system for users.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function private_chat_theme($existing, $type, $theme, $path)
{
  return [
    'private_chat_page' => [
      'variables' => [
        'messages' => [],
        'form' => NULL,
        'chat_uuid' => NULL,
        'block_info' => NULL,
      ],
    ],
    'private_chat_message' => [
      'template' => 'private-chat-message', // Verweist auf die .html.twig Datei
      'variables' => [
        'author_name' => NULL,
        'author_picture' => NULL,
        'body' => NULL,
        'time' => NULL,
        'sent_received' => 'received',
        'status_class' => NULL,
        'status_receiver_class' => NULL,
        'message_id' => NULL,
        'images' => NULL,
      ],
    ],
    'private_chat_ui_page' => [
      'variables' => ['chat_list' => NULL, 'chat_content' => NULL],
      'template' => 'private-chat-ui-page',
    ],
    'private_chat_list_item' => [
      'variables' => [
        'other_participant_name' => NULL,
        'last_message' => [],
        'url' => NULL,
        'is_active' => FALSE,
      ],
      'template' => 'private-chat-list-item',
    ],
    'private_chat_messages_container' => [
      'variables' => ['messages' => NULL],
      'template' => 'private-chat-messages-container',
    ],
  ];
}

/**
 * Implements hook_file_download().
 *
 * Kontrolliert den Zugriff auf private Dateien, die über das Chat-Modul hochgeladen wurden.
 */
// function private_chat_file_download($uri)
// {
//   $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
//   $scheme = $stream_wrapper_manager->getScheme($uri);
//   $target = $stream_wrapper_manager->getTarget($uri);

//   if ($scheme === 'private' && strpos($target, 'private_chat/') === 0) {
//     // Lade das vollständige Benutzer-Objekt für eine zuverlässige Berechtigungsprüfung.
//     $user_storage = \Drupal::entityTypeManager()->getStorage('user');
//     $account = $user_storage->load(\Drupal::currentUser()->id());

//     // Erlaube Zugriff für Admins.
//     if ($account && $account->hasPermission('administer users')) {
//       return [];
//     }

//     // Lade die Datei-Entität basierend auf dem URI.
//     $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
//     if (!$file = reset($files)) {
//       return -1;
//     }

//     // Finde die Chat-Nachricht, die auf diese Datei verweist.
//     $message_storage = \Drupal::entityTypeManager()->getStorage('message');
//     $message_ids = $message_storage->getQuery()
//       // === KORREKTUR HIER ===
//       ->condition('images.target_id', $file->id()) // Explizite Abfrage der target_id
//       ->accessCheck(FALSE)
//       ->range(0, 1)
//       ->execute();

//     if (empty($message_ids)) {
//       return -1;
//     }

//     // Lade den zugehörigen Chat-Thread und prüfe die Teilnehmer.
//     /** @var \Drupal\private_chat\Entity\Message $message */
//     $message = $message_storage->load(reset($message_ids));
//     /** @var \Drupal\private_chat\Entity\Chat $thread */
//     $thread = $message->get('chat_id')->entity;

//     if (!$thread) {
//       return -1;
//     }

//     $participants = [
//       $thread->get('user1')->target_id,
//       $thread->get('user2')->target_id,
//     ];

//     if ($account && in_array($account->id(), $participants)) {
//       // Der Benutzer ist Teil des Chats -> Zugriff erlauben.
//       return [];
//     }

//     // In allen anderen Fällen -> Zugriff verweigern.
//     return -1;
//   }

//   // Für alle anderen Dateien geben wir NULL zurück.
//   return NULL;
// }

/**
 * Implements hook_preprocess_image().
 */
function private_chat_preprocess_image(&$variables)
{
  if ($variables['style_name'] == 'chat_small') {
    $variables['attributes']['class'][] = 'rounded-circle';
  }
}

function private_chat_file_access(FileInterface $file, $operation, AccountInterface $account)
{
  // Wir prüfen nur den 'download'-Vorgang.
  if ($operation !== 'download') {
    return AccessResult::neutral();
  }

  $uri = $file->getFileUri();
  $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
  $scheme = $stream_wrapper_manager->getScheme($uri);
  $target = $stream_wrapper_manager->getTarget($uri);

  // Wir greifen nur für Dateien in unserem Chat-Ordner ein.
  if ($scheme === 'private' && strpos($target, 'private_chat/') === 0) {
    // Lade das vollständige Benutzerobjekt für eine zuverlässige Prüfung.
    $user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
    if (!$user_entity instanceof UserInterface) {
      return AccessResult::forbidden();
    }

    // Admins erlauben den Zugriff.
    if ($user_entity->hasPermission('administer users')) {
      return AccessResult::allowed();
    }

    // Finde die Nachricht, die diese Datei verwendet.
    $message_storage = \Drupal::entityTypeManager()->getStorage('message');
    $message_ids = $message_storage->getQuery()
      ->condition('images.target_id', $file->id())
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();

    if (empty($message_ids)) {
      return AccessResult::forbidden('File is not used in any message.');
    }

    // Prüfe, ob der Benutzer am zugehörigen Chat teilnimmt.
    $message = $message_storage->load(reset($message_ids));
    $thread = $message->get('chat_id')->entity;
    if (!$thread) {
      return AccessResult::forbidden('Message is not linked to a thread.');
    }

    $participants = [
      $thread->get('user1')->target_id,
      $thread->get('user2')->target_id,
    ];

    if (in_array($account->id(), $participants)) {
      return AccessResult::allowed();
    }

    // Wenn keine der Bedingungen zutrifft, verweigere den Zugriff.
    return AccessResult::forbidden();
  }

  // Für alle anderen Dateien haben wir keine Meinung.
  return AccessResult::neutral();
}
